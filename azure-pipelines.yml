trigger:
  - main

variables:
- name: variableGroupId

parameters:
- name: serviceConnection
  displayName: Azure Service Connection Name
  type: string
  default: sc-for-julia

steps:
  - task: AzureCLI@2
    displayName: 'Get variable group ID'
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "Using logged-in Azure CLI session..."
        Write-Host "$($PSStyle.Formatting.FormatAccent)az devops configure$($PSStyle.Reset)"
        az devops configure --defaults organization=$(System.CollectionUri) project=$(System.TeamProject)
        az devops configure -l

        Write-Host "`nUse Azure DevOps CLI (az devops) to list projects in the organization '$(System.CollectionUri)'..."
        Write-Host "$($PSStyle.Formatting.FormatAccent)az devops project list$($PSStyle.Reset)"
        az devops project list --query "value[].{Name:name, Id:id}" `
                                -o table

        $groupId = az pipelines variable-group list --group-name "kubernetes" --query "[].id" -o tsv
        Write-Host "##vso[task.setvariable variable=variableGroupId]$groupId"

  # - task: AzureCLI@2
  #   condition: and(succeeded(), ne(variables['variableGroupId'], ''))
  #   displayName: 'List variables in variable group'
  #   inputs:
  #     azureSubscription: '${{ parameters.serviceConnection }}'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       az devops configure --defaults organization=$(System.CollectionUri) project=$(System.TeamProject)
  #       az pipelines variable-group variable list --group-id '$(variableGroupId)'

  # - task: AzureCLI@2
  #   displayName: 'Azure CLI -> Azure DevOps REST API'
  #   inputs:
  #     azureSubscription: '${{ parameters.serviceConnection }}'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       Write-Host "`nUse Azure DevOps REST API to get Azure Pipelines health status '$(System.CollectionUri)'..."
  #       Write-Host "$($PSStyle.Formatting.FormatAccent)az rest --url https://status.dev.azure.com/_apis/status/health?api-version=7.1-preview.1$($PSStyle.Reset)"
  #       az rest --method get `
  #               --url "https://status.dev.azure.com/_apis/status/health?api-version=7.1-preview.1" `
  #               --resource 499b84ac-1321-427f-aa17-267ca6975798 `
  #               --query "sort_by(services[?id=='Pipelines'].geographies | [], &name)" `
  #               -o table

  #       Write-Host "`nObtaining access token for Service Connection identity..."
  #       # 499b84ac-1321-427f-aa17-267ca6975798 is the Azure DevOps resource ID
  #       Write-Host "$($PSStyle.Formatting.FormatAccent)az account get-access-token$($PSStyle.Reset)"
  #       az account get-access-token --resource 499b84ac-1321-427f-aa17-267ca6975798 `
  #                                   --query "accessToken" `
  #                                   --output tsv `
  #                                   | Set-Variable aadToken

  #       Write-Host "`nUse token with Azure DevOps REST API to list pools in the organization '$(System.CollectionUri)'..."
  #       $apiVersion = "7.1-preview.1"
  #       $apiUrl = "$(System.CollectionUri)_apis/distributedtask/pools?api-version=${apiVersion}"
  #       Invoke-RestMethod -Uri $apiUrl `
  #                         -Headers @{
  #                             Accept         = "application/json"
  #                             Authorization  = "Bearer $aadToken"
  #                             "Content-Type" = "application/json"
  #                         } `
  #                         -Method Get `
  #                         | Select-Object -ExpandProperty value `
  #                         | Select-Object id, name
  #     failOnStandardError: true

    # trigger:
    #   - main
    
    # pool:
    #   vmImage: 'ubuntu-latest'
    
    # variables:
    #   nodeVersion: '18.x'
    
    # steps:
    #   # Install Node.js
    #   - task: UseNode@1
    #     inputs:
    #       version: $(nodeVersion)
    #     displayName: 'Install Node.js'
    
    #   # Install dependencies
    #   - script: |
    #       npm install
    #     displayName: 'Install dependencies'
    
    #   # Build the project
    #   - script: |
    #       npm run build
    #     displayName: 'Build project'
    
    #   # Run tests
    #   - script: |
    #       npm test
    #     displayName: 'Run tests'
    
    #   # Copy project files to artifact staging directory
    #   - task: CopyFiles@2
    #     inputs:
    #       sourceFolder: '$(Build.SourcesDirectory)'
    #       contents: |
    #         src/**
    #         public/**
    #       targetFolder: '$(Build.ArtifactStagingDirectory)'
    #     displayName: 'Copy project files'
    
    #   # Publish pipeline artifact
    #   - task: PublishPipelineArtifact@1
    #     inputs:
    #       artifactName: 'nodejs-app'
    #       targetPath: '$(Build.ArtifactStagingDirectory)'
    #     displayName: 'Publish pipeline artifact'
